students :: [String]
students = ["Alice", "Bob", "POto", "Hasna", "Oswald"]

tableau :: [[String]]
tableau =
  [ ["A", "B", "C", "D"],
    ["E", "F", "G", "H"],
    ["I", "J", "K", "L"]
  ]

jeu =
  [ ["A", "B", "C", "D"],
    ["E", "F", "G", "H"],
    ["I", "J", "K", "L"],
    ["M", "N", "O", "P"]
  ]

taille :: Int
taille = length students

afficheStudents :: Int -> IO ()
afficheStudents num = do
  let student = students !! num
  if num < taille
    then do
      putStrLn student
      afficheStudents (num + 1)
    else putStrLn "fini"

taille1 :: Int
taille1 = length tableau

taille2 :: Int
taille2 = 3 * taille1


changerValeur :: String -> String -> String
changerValeur x y = y

longueur :: Int
longueur = 4

{-
afficheJeu :: Int -> Int -> Int -> IO ()
afficheJeu num1 num2 hauteur1 = do
    if hauteur1 <= 3
    then do
        let piece = tableau !! num1 !! num2
        putStr $("a case :" ++ show num1 ++ ":" ++ show num2 ++ " = " ++ piece)
        afficheJeu (num1 + 1) num2 (hauteur1 + 1)
    else if num2 < taille1
    then do
        putStrLn ""  -- Passer à la ligne suivante
        afficheJeu 0 (num2 + 1) 1
    else return ()  -- Fin de l'affichage-}
{-
afficheJeu :: Int -> Int -> Int -> IO ()
afficheJeu num1 num2 hauteur1 = do
    if hauteur1 <= 4
    then do
        let piece = jeu !! num1 !! num2
        putStr $("a case :" ++ show num1 ++ ":" ++ show num2 ++ " = " ++ piece)
        --let hauteur2 = incremente hauteur1
        afficheJeu (num1 + 1) num2 hauteur1
    else if num2 < taille1 && hauteur2 <= 4
    then do
        let hauteur2 = incremente hauteur1
        putStrLn ""  -- Passer à la ligne suivante
        afficheJeu 0 (num2 + 1) hauteur2
    else return ()  -- Fin de l'affichage-}


incrementeJusqua :: Int -> Int -> Int
incrementeJusqua x y = 
  if x /= y
    then do
      incrementeJusqua (x + 1) y
  else
    x


haute :: Int
haute = 1

afficheJeu1 :: Int -> Int -> Int -> IO ()
afficheJeu1 num1 num2 hauteur1
  | num1 < 4 && num2 < 4 && hauteur1 < 4 = do
      let piece = jeu !! num2 !! num1
      putStr piece
      afficheJeu1 (num1 + 1) num2 hauteur1
  | num2 < 4 && hauteur1 < 4 = do
      putStrLn ""
      afficheJeu1 0 (num2 + 1) hauteur1
  | otherwise = return ()


{-}
parcourJeu :: [[String]] -> String -> Int -> Int -> Int -> Int -> Int -> [[String]]
parcoursJeu jeu pieceAjoute num1 num2 num11 num22 hauteur1 = 
  if num1 < 4 && hauteur1 < 4
    then do
     if num2 < 4 && hauteur1 < 4
      putStrLn "case : " ++ num2 ++ ":" ++ num1
      parcoursJeu jeu pieceAjoute (num1 + 1) num2 num11 num22 hauteur1
  else
    parcoursJeu jeu pieceAjoute num1 (num2 + 1) num11 num22 hauteur1
      -}
    

modifierCaseJeu :: [[String]] -> String -> Int -> Int -> Int -> Int -> Int -> [[String]]
modifierCaseJeu jeu pieceAjoute num1 num2 num11 num22 hauteur1
  | num1 < 4 && num2 < 4 && hauteur1 < 4 = do
      let pieceAModif = jeu !! num2 !! num1
      let ligneModifiee =
            if num22 == num2 && num11 == num1
              then let (avant, apres) = splitAt num22 (jeu !! num1)
                   in avant ++ [pieceAjoute] ++ tail apres
              else jeu !! num1 --modif ici
      let jeuModifie = take num1 jeu ++ [ligneModifiee] ++ drop (num1 + 1) jeu
      modifierCaseJeu jeuModifie pieceAjoute (num1 + 1) num2 num11 num22 hauteur1
  | num2 < 4 && hauteur1 < 4 = do
      --putStrLn ""
      modifierCaseJeu jeu pieceAjoute num1 (num2 + 1) num11 num22 hauteur1
  | otherwise = jeu -- Si aucune modification, retournez le tableau d'origine

{-
modifierCaseJeu1 :: [[String]] -> String -> Int -> Int -> Int -> Int -> Int -> [[String]]
modifierCaseJeu1 jeu pieceAjoute num1 num2 num11 num22 hauteur1
  | num1 < 4 && num2 < 4 && hauteur1 < 4 = do
      let pieceAModif = jeu !! num2 !! num1
      let ligneModifiee =
            if num22 == num2 && num11 == num1
              then let (avant, apres) = splitAt num22 (jeu !! num1)
                   in avant ++ [pieceAjoute] ++ tail apres
              else if num22 == num2
                     then let x1 = incrementeJusqua num1 num11
                          in modifierCaseJeu1 jeu pieceAjoute x1 num2 num11 num22 hauteur1
                     else if num11 == num1
                            then let x2 = incrementeJusqua num2 num22
                                 in modifierCaseJeu1 jeu pieceAjoute num1 x2 num11 num22 hauteur1
                            else jeu !! num1 --modif ici
      let jeuModifie = take num1 jeu ++ [ligneModifiee] ++ drop (num1 + 1) jeu
      modifierCaseJeu1 jeuModifie pieceAjoute (num1 + 1) num2 num11 num22 hauteur1
  | num2 < 4 && hauteur1 < 4 = do
      --putStrLn ""
      modifierCaseJeu1 jeu pieceAjoute num1 (num2 + 1) num11 num22 hauteur1
  | otherwise = jeu -- Si aucune modification, retournez le tableau d'origine
-}
{-
modifierCaseJeu1 :: [[String]] -> String -> Int -> Int -> Int -> Int -> Int -> [[String]]
modifierCaseJeu1 jeu pieceAjoute num1 num2 num11 num22 hauteur1
  | num1 < 4 && num2 < 4 && hauteur1 < 4 = do
      let pieceAModif = jeu !! num2 !! num1
      let ligneModifiee =
            if num22 == num2 && num11 == num1
              then let (avant, apres) = splitAt num22 (jeu !! num1)
                   in avant ++ [pieceAjoute] ++ tail apres
              else if num22 == num2
                     then let x1 = incrementeJusqua num1 num11
                          in modifierCaseJeu1 jeu pieceAjoute x1 num2 num11 num22 hauteur1
                     else if num11 == num1
                            then let x2 = incrementeJusqua num2 num22
                               in modifierCaseJeu1 jeu pieceAjoute num1 x2 num11 num22 hauteur1
                            else jeu !! num1 --modif ici
      let jeuModifie = take num1 jeu ++ [ligneModifiee] ++ drop (num1 + 1) jeu
      modifierCaseJeu1 jeuModifie pieceAjoute (num1 + 1) num2 num11 num22 hauteur1
  | num2 < 4 && hauteur1 < 4 = do
      --putStrLn ""
      modifierCaseJeu1 jeu pieceAjoute num1 (num2 + 1) num11 num22 hauteur1
  | otherwise = jeu -- Si aucune modification, retournez le tableau d'origine
-}


--meilleur version , plus clean
modifierCase2D :: [[a]] -> a -> Int -> Int -> [[a]]
modifierCase2D tableau nouvelleValeur ligne colonne
  | ligne < 0 || ligne >= length tableau || colonne < 0 || colonne >= length (tableau !! 0) = tableau
  | otherwise =
    let (avant, apres) = splitAt colonne (tableau !! ligne)
    in take ligne tableau ++ [avant ++ [nouvelleValeur] ++ tail apres] ++ drop (ligne + 1) tableau




-----modif case tableau 1D
modifStudent :: [String] -> Int -> String -> [String]
modifStudent liste pos new =
  if pos >= 0 && pos < 5
    then
      let (avant, apres) = splitAt pos liste
      in avant ++ [new] ++ tail apres
    else
      liste  -- Retourne la liste inchangée si la position est invalide
-------------------


main :: IO ()
main = do
  afficheStudents 0
  putStrLn "Tableau :"
  -- afficheJeu 0 0 1
  afficheJeu1 0 0 1

  --modifierCaseJeu "gogo" 0 0 0 0 1
  --afficheJeu1 0 0 1

  let newStud = modifStudent students 1 "mafemme"

  print newStud

  --let nouveauJeu = modifierCaseJeu jeu "NouvelleValeur" 0 0 3 1 1


  --print nouveauJeu

  let x = 2
  let a = incrementeJusqua x 6

  print a

  let pieceAjoute = "X"

  --let nouveauJeu = modifierCaseJeu1 jeu pieceAjoute 3 1 3 1 1

  --inverse les cases du tableau , exemple je veux changer la case G pour R, G est a (2,1) en temps normal mais ds la logique du jeu, cest (1,2) donc on inverse
  let p = modifierCase2D jeu "R" 3 3
  
  print p


